{"version":3,"sources":["logo.svg","components/nav/nav.jsx","components/loading/loading.jsx","components/creategame/creategame.jsx","components/homescreen/inputpin/inputpin.jsx","components/progress/progress.jsx","components/homescreen/homescreen.jsx","components/questionaire/theorymodal/theorymodal.jsx","components/questionaire/questionaire.jsx","components/summary/summary.jsx","App.js","serviceWorker.js","components/creategame/created/created.jsx","index.js"],"names":["module","exports","Nav","state","className","to","Component","Loading","class","CreateGame","title","description","theories","questions","initiated","currentlyChaning","flipCoin","awaitingCreation","submitQuestion","e","preventDefault","target","currentQuestions","console","log","question","question_id","text","value","img","option_1","getQuestionTheories","option_2","option_3","push","setState","document","getElementsByName","reset","handleInitFormChange","name","handleInitFormSubmit","handleFlipCheck","checked","form","optionIndex","allTheories","i","length","type","includes","indexOf","getAllTheories","createQuestionaire","async","questionaire","axios","post","params","then","response","props","history","pathname","data","catch","error","this","onSubmit","style","color","placeholder","required","onChange","t","disabled","onClick","InputPin","initialValue","index","padding","inputStyle","border","borderBottom","borderColor","fontSize","margin","inputFocusStyle","onComplete","redir","Progress","width","percentage","Homescreen","redirect","fontWeight","textDecoration","TheoryModal","fullscreen","toggleModal","data-icon","iconText","data-inline","theory","Questionaire","started","isLoading","currentQuestionIndex","currentQuestion","scores","answers","theoryData","quote","summaryText","philosophers","getProgress","reloadImg","uuidv1","incrementScore","currentScores","map","score","newScore","calculateScorePercentage","generateScores","temp","nextQuestion","option","curr","answer","summary","questionaire_id","id","numOfQuestions","date","Date","getTheoryData","fetchQuestionaire","get","ID","notFound","match","Summary","highest","icons","findHighest","getIcon","pushAnswers","location","App","testBackend","status","Boolean","window","hostname","Created","createdgame","link","generateLink","url","cn","routing","exact","path","component","Creategame","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fc12c771.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./nav.css\";\r\nclass Nav extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"placeholder-box\">\r\n        <div className=\"link-wrapper\">\r\n          <Link to=\"/\">\r\n            <span>{\"<\"}</span>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;\r\n","import React, { Component } from \"react\";\r\nimport \"./loading.css\";\r\nclass Loading extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"loading-wrapper\">\r\n        <div class=\"lds-roller\">\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n","import React, { Component } from \"react\";\r\nimport \"./creategame.css\";\r\nimport axios from \"axios\";\r\nimport { v1 as uuidv1 } from \"uuid\";\r\nimport Nav from \"../nav/nav\";\r\nimport Loading from \"../loading/loading\";\r\n\r\nclass CreateGame extends Component {\r\n  state = {\r\n    title: \"\",\r\n    description: \"\",\r\n    theories: [],\r\n    questions: [],\r\n    initiated: false,\r\n    currentlyChaning: 0,\r\n    flipCoin: false,\r\n    awaitingCreation: false,\r\n  };\r\n\r\n  componentDidMount() {}\r\n  render() {\r\n    return (\r\n      <div className=\"creategame-wrapper\">\r\n        <Nav />\r\n        {!this.state.initiated ? (\r\n          <div className=\"form-init-wrapper\">\r\n            <form\r\n              className=\"init-form\"\r\n              onSubmit={(e) => this.handleInitFormSubmit(e)}\r\n              onChange={(e) => this.handleInitFormChange(e)}\r\n            >\r\n              <label>Title</label>\r\n              <input name=\"title\" type=\"text\" required></input>\r\n              <label>Description</label>\r\n              <textarea\r\n                type=\"text\"\r\n                name=\"description\"\r\n                className=\" textarea textarea-big\"\r\n                required\r\n              ></textarea>\r\n              <input className=\"nextbutton\" type=\"submit\" value=\"next\"></input>\r\n            </form>\r\n          </div>\r\n        ) : (\r\n          <div className=\"form-questions-wrapper\">\r\n            <form\r\n              name=\"question-form\"\r\n              className=\"question-form\"\r\n              onSubmit={(e) => {\r\n                this.submitQuestion(e);\r\n              }}\r\n            >\r\n              <h2 style={{ color: \"white\" }}>\r\n                Dilemma {this.state.currentlyChaning + 1}\r\n              </h2>\r\n              <label>Image Link</label>\r\n              <input type=\"text\" name=\"img\" placeholder=\"optional\"></input>\r\n              <label>Text</label>\r\n              <textarea\r\n                className=\"textarea\"\r\n                type=\"text\"\r\n                name=\"text\"\r\n                required\r\n              ></textarea>\r\n              <label>Question</label>\r\n              <input type=\"text\" name=\"question\" required></input>\r\n              <div className=\"options-container\">\r\n                <div className=\"option-box\">\r\n                  <div className=\"option-header\">\r\n                    <label>Option 1</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"option_1\"\r\n                      className=\"option-text\"\r\n                      required\r\n                    ></input>\r\n                  </div>\r\n                  <div className=\"chexbox-containers-wrapper\">\r\n                    <div className=\"checkbox-container\">\r\n                      <div className=\"filler\"></div>\r\n                      <label>Act Utilitarianism</label>\r\n                      <input\r\n                        name=\"au1\"\r\n                        value=\"Act Utilitarianism\"\r\n                        type=\"checkbox\"\r\n                      ></input>\r\n                    </div>\r\n                    <div className=\"checkbox-container\">\r\n                      <div className=\"filler\"></div>\r\n                      <label>Kantian Ethics</label>\r\n                      <input\r\n                        name=\"ke1\"\r\n                        value=\"Kantian Ethics\"\r\n                        type=\"checkbox\"\r\n                      ></input>\r\n                    </div>\r\n                    <div className=\"checkbox-container\">\r\n                      <div className=\"filler\"></div>\r\n                      <label>Aristotelianism</label>\r\n                      <input\r\n                        name=\"ar1\"\r\n                        value=\"Aristotelianism\"\r\n                        type=\"checkbox\"\r\n                      ></input>\r\n                    </div>\r\n                    <div className=\"checkbox-container\">\r\n                      <div className=\"filler\"></div>\r\n                      <label>Ethical Egoism</label>\r\n                      <input\r\n                        name=\"ee1\"\r\n                        value=\"Ethical Egoism\"\r\n                        type=\"checkbox\"\r\n                      ></input>\r\n                    </div>\r\n                    <div className=\"checkbox-container\">\r\n                      <div className=\"filler\"></div>\r\n                      <label>Classical Natural Law Theory</label>\r\n                      <input\r\n                        name=\"cnlt1\"\r\n                        value=\"Classical Natural Law Theory\"\r\n                        type=\"checkbox\"\r\n                      ></input>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div></div>\r\n                <div className=\"option-box\">\r\n                  <div className=\"option-header\">\r\n                    <label>Option 2</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"option_2\"\r\n                      className=\"option-text\"\r\n                      required\r\n                    ></input>\r\n                  </div>\r\n                  <div className=\"chexbox-containers-wrapper\">\r\n                    <div className=\"checkbox-container\">\r\n                      <div className=\"filler\"></div>\r\n                      <label>Act Utilitarianism</label>\r\n                      <input\r\n                        name=\"au2\"\r\n                        value=\"Act Utilitarianism\"\r\n                        type=\"checkbox\"\r\n                      ></input>\r\n                    </div>\r\n                    <div className=\"checkbox-container\">\r\n                      <div className=\"filler\"></div>\r\n                      <label>Kantian Ethics</label>\r\n                      <input\r\n                        name=\"ke2\"\r\n                        value=\"Kantian Ethics\"\r\n                        type=\"checkbox\"\r\n                      ></input>\r\n                    </div>\r\n                    <div className=\"checkbox-container\">\r\n                      <div className=\"filler\"></div>\r\n                      <label>Aristotelianism</label>\r\n                      <input\r\n                        name=\"ar2\"\r\n                        value=\"Aristotelianism\"\r\n                        type=\"checkbox\"\r\n                      ></input>\r\n                    </div>\r\n                    <div className=\"checkbox-container\">\r\n                      <div className=\"filler\"></div>\r\n                      <label>Ethical Egoism</label>\r\n                      <input\r\n                        name=\"ee2\"\r\n                        value=\"Ethical Egoism\"\r\n                        type=\"checkbox\"\r\n                      ></input>\r\n                    </div>\r\n                    <div className=\"checkbox-container\">\r\n                      <div className=\"filler\"></div>\r\n                      <label>Classical Natural Law Theory</label>\r\n                      <input\r\n                        name=\"cnlt2\"\r\n                        value=\"Classical Natural Law Theory\"\r\n                        type=\"checkbox\"\r\n                      ></input>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"flip-coin-container\">\r\n                <input\r\n                  onChange={(e) => this.handleFlipCheck(e)}\r\n                  t\r\n                  type=\"checkbox\"\r\n                ></input>\r\n                <label>\"Flip a coin\"-option?</label>\r\n              </div>\r\n              {this.state.flipCoin ? (\r\n                <div className=\"option-box\">\r\n                  <div className=\"option-header\">\r\n                    <label>Option 3</label>\r\n                    <input\r\n                      disabled\r\n                      type=\"text\"\r\n                      name=\"option_3\"\r\n                      value=\"Flip a coin\"\r\n                      required\r\n                    ></input>\r\n                  </div>\r\n                  <div className=\"chexbox-containers-wrapper\">\r\n                    <div className=\"checkbox-container\">\r\n                      <div className=\"filler\"></div>\r\n                      <label>Act Utilitarianism</label>\r\n                      <input\r\n                        name=\"au3\"\r\n                        value=\"Act Utilitarianism\"\r\n                        type=\"checkbox\"\r\n                      ></input>\r\n                    </div>\r\n                    <div className=\"checkbox-container\">\r\n                      <div className=\"filler\"></div>\r\n                      <label>Kantian Ethics</label>\r\n                      <input\r\n                        name=\"ke3\"\r\n                        value=\"Kantian Ethics\"\r\n                        type=\"checkbox\"\r\n                      ></input>\r\n                    </div>\r\n                    <div className=\"checkbox-container\">\r\n                      <div className=\"filler\"></div>\r\n                      <label>Aristotelianism</label>\r\n                      <input\r\n                        name=\"ar3\"\r\n                        value=\"Aristotelianism\"\r\n                        type=\"checkbox\"\r\n                      ></input>\r\n                    </div>\r\n                    <div className=\"checkbox-container\">\r\n                      <div className=\"filler\"></div>\r\n                      <label>Ethical Egoism</label>\r\n                      <input\r\n                        name=\"ee3\"\r\n                        value=\"Ethical Egoism\"\r\n                        type=\"checkbox\"\r\n                      ></input>\r\n                    </div>\r\n                    <div className=\"checkbox-container\">\r\n                      <div className=\"filler\"></div>\r\n                      <label>Classical Natural Law Theory</label>\r\n                      <input\r\n                        name=\"cnlt3\"\r\n                        value=\"Classical Natural Law Theory\"\r\n                        type=\"checkbox\"\r\n                      ></input>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n\r\n              <input className=\"addbutton\" type=\"submit\" value=\"Add\"></input>\r\n            </form>\r\n            <button\r\n              className={\r\n                this.state.questions.length > 0\r\n                  ? \"createbutton\"\r\n                  : \"createbutton unclickable\"\r\n              }\r\n              onClick={() => this.createQuestionaire()}\r\n            >\r\n              Create\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {this.state.awaitingCreation ? (\r\n          <div className=\"fullscreen-modal\">\r\n            <h3 className=\"modal-text\">Creating game</h3>\r\n            <div className=\"modal-content\">\r\n              <Loading />\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  submitQuestion = (e) => {\r\n    e.preventDefault();\r\n    let target = e.target;\r\n    let currentQuestions = this.state.questions;\r\n    console.log(target);\r\n    let question = {\r\n      /**TODO: ADD NAMES TO CHECKBOXES AND ADD TO THIS OBJECT */\r\n\r\n      question_id: this.state.currentlyChaning,\r\n      text: target.text.value,\r\n      img: target.img.value,\r\n      question: target.question.value,\r\n      option_1: {\r\n        text: target.option_1.value,\r\n        theories: this.getQuestionTheories(target, 1),\r\n      },\r\n      option_2: {\r\n        text: target.option_2.value,\r\n        theories: this.getQuestionTheories(target, 2),\r\n      },\r\n    };\r\n\r\n    if (this.state.flipCoin) {\r\n      question.option_3 = {\r\n        text: target.option_3.value,\r\n        theories: this.getQuestionTheories(target, 3),\r\n      };\r\n    }\r\n\r\n    currentQuestions.push(question);\r\n    let currentlyChaning = this.state.currentlyChaning + 1;\r\n    this.setState({\r\n      questions: currentQuestions,\r\n      currentlyChaning,\r\n      flipCoin: false,\r\n    });\r\n\r\n    var frm = document.getElementsByName(\"question-form\")[0];\r\n    frm.reset();\r\n  };\r\n  handleInitFormChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n  handleInitFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ initiated: true });\r\n  };\r\n  handleFlipCheck = (e) => {\r\n    this.setState({ flipCoin: e.target.checked });\r\n  };\r\n\r\n  getQuestionTheories = (form, optionIndex) => {\r\n    let allTheories = this.state.theories;\r\n    let theories = [];\r\n    for (let i = 0; i < form.length; i++) {\r\n      if (\r\n        form[i].type == \"checkbox\" &&\r\n        form[i].checked &&\r\n        form[i].name.includes(optionIndex)\r\n      ) {\r\n        theories.push(form[i].value);\r\n        //*ADDS THEORY TO QUESTIONAIRE IF NOT ALREADY ADDED */\r\n        if (allTheories.indexOf(form[i].value) === -1) {\r\n          allTheories.push(form[i].value);\r\n          console.log(allTheories);\r\n          this.setState({ theories: allTheories });\r\n        }\r\n      }\r\n    }\r\n    return theories;\r\n  };\r\n  getAllTheories = () => {};\r\n  createQuestionaire = (async) => {\r\n    this.setState({ awaitingCreation: true });\r\n    let questionaire = {\r\n      title: this.state.title,\r\n      description: this.state.description,\r\n      theories: this.state.theories,\r\n      questions: this.state.questions,\r\n    };\r\n\r\n    axios\r\n      .post(\"/addQuestionaire\", {\r\n        params: {\r\n          questionaire: questionaire,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n        this.setState({ awaitingCreation: false });\r\n        this.props.history.push({\r\n          pathname: \"/created\",\r\n          state: {\r\n            data: response.data,\r\n          },\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n}\r\n\r\nexport default CreateGame;\r\n","import React, { Component } from \"react\";\r\nimport PinInput from \"react-pin-input\";\r\nimport \"./inputpin.css\";\r\nclass InputPin extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"inputpin-wrapper\">\r\n        <h3 style={{ color: \"white\" }}>Enter game code</h3>\r\n        <PinInput\r\n          length={4}\r\n          initialValue=\"\"\r\n          onChange={(value, index) => {}}\r\n          type=\"numeric\"\r\n          style={{ padding: \"10px\" }}\r\n          inputStyle={{\r\n            border: \"none\",\r\n            borderBottom: \"2px solid\",\r\n            borderColor: \"white\",\r\n            color: \"white\",\r\n            fontSize: \"20px\",\r\n            margin: \"5px\",\r\n          }}\r\n          inputFocusStyle={{ borderColor: \"#F1C281\" }}\r\n          onComplete={(value, index) => this.props.redir(value)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputPin;\r\n","import React, { Component } from \"react\";\r\nimport \"./progress.css\";\r\nclass Progress extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {}\r\n  render() {\r\n    return (\r\n      <div className=\"progress-wrapper\">\r\n        <div className=\"progress-outer\">\r\n          <div\r\n            className=\"progress-inner\"\r\n            style={{ width: this.props.percentage + \"%\" }}\r\n          ></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Progress;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./homescreen.css\";\r\nimport Nav from \"../nav/nav\";\r\nimport InputPin from \"./inputpin/inputpin\";\r\nimport Progress from \"../progress/progress\";\r\n\r\nclass Homescreen extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"homescreen-wrapper\">\r\n        <InputPin redir={(value) => this.redirect(value)} />\r\n        <h3 style={{ color: \"white\", fontWeight: \"100\" }}>or</h3>\r\n        <Link to=\"/create\" style={{ color: \"white\", textDecoration: \"none\" }}>\r\n          Create a new game\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  redirect = (value) => {\r\n    this.props.history.push(\"/questionaire/\" + value);\r\n  };\r\n}\r\n\r\nexport default Homescreen;\r\n","import React, { Component } from \"react\";\r\nimport \"./theorymodal.css\";\r\nclass TheoryModal extends Component {\r\n  state = { fullscreen: false, data: {} };\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  componentDidMount() {\r\n    this.setState({ data: this.props.data });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"theory-modal-wrapper\" onClick={() => this.toggleModal()}>\r\n        <span\r\n          className=\"theory-icon\"\r\n          class=\"iconify\"\r\n          data-icon={this.state.data.iconText}\r\n          data-inline=\"false\"\r\n        ></span>\r\n        <h3 className=\"theory-modal-title\">{this.state.data.theory}</h3>\r\n        {this.state.fullscreen ? (\r\n          <div className=\"modal-fullscreen\">\r\n            <div className=\"theory-modal-content\">\r\n              <span\r\n                className=\"theory-icon\"\r\n                class=\"iconify\"\r\n                data-icon={this.state.data.iconText}\r\n                data-inline=\"false\"\r\n              ></span>\r\n              <h3 className=\"theory-modal-title-large\">\r\n                {this.state.data.theory}\r\n              </h3>\r\n              <p>{this.state.data.description}</p>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  toggleModal = () => {\r\n    this.setState({ fullscreen: !this.state.fullscreen });\r\n  };\r\n}\r\n\r\nexport default TheoryModal;\r\n","import React, { Component } from \"react\";\r\nimport Loading from \"../loading/loading\";\r\nimport { v1 as uuidv1 } from \"uuid\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"./questionaire.css\";\r\nimport Nav from \"../nav/nav\";\r\nimport Progress from \"../progress/progress\";\r\nimport TheoryModal from \"./theorymodal/theorymodal\";\r\nclass Questionaire extends Component {\r\n  state = {\r\n    started: false,\r\n    isLoading: true,\r\n    questionaire: {},\r\n    currentQuestionIndex: 0,\r\n    currentQuestion: {},\r\n    scores: [],\r\n    answers: [],\r\n    theoryData: [\r\n      {\r\n        theory: \"Act Utilitarianism\",\r\n        iconText: \"twemoji:balance-scale\",\r\n        description:\r\n          \"An action is right or wrong depending on the amount of benefit it provides to  the most people.\",\r\n        quote: \"The greatest amount of good for the greatest amount of people\",\r\n        summaryText:\r\n          \"Utilitarianism believe that an action is right or wrong based on their effect. If the action benefits the most people, it is right and is chosen over the other bad actions.  Its calculated from the amount of happiness gained minus pain it causes\",\r\n        philosophers: [\"John Stuart\", \"Jeremy Bentham\"],\r\n      },\r\n      {\r\n        theory: \"Kantian Ethics\",\r\n        iconText: \"twemoji:brain\",\r\n        description:\r\n          \"People have a duty to do the right thing no matter the result of said action. Everyone should act the way they want others to act in the same situation as a general law. \",\r\n        quote:\r\n          \"Act only according to that maxim by which you can at the same time will that it should be a universal law\",\r\n        summaryText:\r\n          \"Kantian Ethics believe that an action is only morally good if it follows the categorical imperative: Universalizability, Humanity, Autonomy. Categorical imperative must always be followed no matter the situation or what you desire to do. The only good is goodwill which is achieved when people follow their duty and act within moral law. \",\r\n        philosophers: [\"Immanuel Kant\"],\r\n      },\r\n      {\r\n        theory: \"Aristotelianism\",\r\n        iconText: \"noto:man-superhero\",\r\n        description:\r\n          \"A person’s action reflects their inner identity. If a person inhabits a moral identity, then his or her actions will also be moral. \",\r\n        quote:\r\n          \"In order to make a judgement about right or wrong, one must analyse and conclude what an individual who possesses all those virtues, would do in that particular situation\",\r\n        summaryText:\r\n          \"Aristotelianism believe that is not one’s actions, but rather one’s inner identity and character that represent the root of morality. The action a person carries out is just a reflection of their inner identity and therefore it is moral if the person inhabits a moral inner identity\",\r\n        philosophers: [\"Aristoteles\"],\r\n      },\r\n      {\r\n        theory: \"Ethical Egoism\",\r\n        iconText: \"emojione-v1:detective\",\r\n        description:\r\n          \"People act in their own self-interests and therefore it’s ethical correct to pursue and maximize one’s own self-interest\",\r\n        quote: \"An act is moral if it maximizes the self-interest of the doer\",\r\n        summaryText:\r\n          \"Ethical egoists believe that all people act in their own self-interests and therefore it’s ethical correct to pursue and maximize one’s own self-interest. Self-interests  is  defined  in  the  long-term  perspective  and  do  not  include short-term desires.\",\r\n        philosophers: [\"Henry Sidgwick\"],\r\n      },\r\n      {\r\n        theory: \"Classical Natural Law Theory\",\r\n        iconText: \"mdi:human-handsup\",\r\n        description:\r\n          \"An act can only be truly moral if the motives behind the act is right . What we can consider right depends solely on the rational nature of human beings which means that the right thing to do is the natural thing. What we constitute as right or wrong Is the same for everyone.\",\r\n        quote:\r\n          \"Live peacefully, be reasonable, express gratitude, procreate and acquire wisdom and pass it on\",\r\n        summaryText:\r\n          \"Classical Natural Law Theory believe that not only an act itself but also a person’s motives must be right in order to be truly moral. The right thing to do is therefore the natural thing to do\",\r\n        philosophers: [\"Thomas Aquinas\"],\r\n      },\r\n    ],\r\n  };\r\n  async componentDidMount() {\r\n    console.log(uuidv1());\r\n    await this.setState({ id: this.props.match.params[\"id\"] });\r\n    this.fetchQuestionaire();\r\n  }\r\n  render() {\r\n    /** Loading while getting questionaire from backend/mongodb */\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <div className=\"questionaire-wrapper\">\r\n          <Loading />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (this.state.notFound) {\r\n      return (\r\n        <div className=\"questionaire-wrapper\">\r\n          <h1 style={{ color: \"white\" }}>Not found..</h1>\r\n          <Link to=\"/\">Back</Link>\r\n        </div>\r\n      );\r\n    }\r\n    /**If a questionaire of ID from input can't be found */\r\n    return !this.state.started ? (\r\n      <div className=\"questionaire-wrapper\">\r\n        <Nav />\r\n        <div className=\"questionaire-init\">\r\n          <h1>{this.state.questionaire.title}</h1>\r\n          <p>{this.state.questionaire.description}</p>\r\n          <div className=\"moral-theories-header\">\r\n            <h3>Moral Theories</h3>\r\n            <h4>(click for more info)</h4>\r\n\r\n            <div className=\"moral-theories-container\">\r\n              {this.state.questionaire.theories.map((theory) => {\r\n                return <TheoryModal data={this.getTheoryData(theory)} />;\r\n              })}\r\n            </div>\r\n          </div>\r\n          <div className=\"fillerStart\"></div>\r\n          <button\r\n            className=\"start-btn\"\r\n            onClick={() => {\r\n              this.setState({ started: true });\r\n            }}\r\n          >\r\n            Start\r\n          </button>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      /**If a questionaire matches ID */\r\n      <div className=\"questionaire-wrapper\">\r\n        <Nav />\r\n        <div className=\"section top-section\">\r\n          <div className=\"score-container\">\r\n            {this.state.scores.map((score) => {\r\n              let theories = this.state.theoryData;\r\n              for (let index in theories) {\r\n                if (theories[index].theory === score.theory) {\r\n                  return (\r\n                    <div className=\"score-box\">\r\n                      <span\r\n                        className=\"theory-icon\"\r\n                        class=\"iconify\"\r\n                        data-icon={theories[index].iconText}\r\n                        data-inline=\"false\"\r\n                      ></span>\r\n                      <Progress\r\n                        percentage={this.calculateScorePercentage(score.score)}\r\n                      />\r\n                    </div>\r\n                  );\r\n                }\r\n              }\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className=\"question-section section\">\r\n          {/* {this.state.currentQuestion.img ? (\r\n            <img src={this.state.currentQuestion.img} />\r\n          ) : (\r\n            \"\"\r\n          )} */}\r\n          <p className=\"question-text\">{this.state.currentQuestion.text}</p>\r\n        </div>\r\n        <div className=\"button-section section\">\r\n          <p className=\"question-question\">\r\n            {this.state.currentQuestion.question}\r\n          </p>\r\n          <div className=\"button-container\">\r\n            <div className=\"horizontal-buttons\">\r\n              <button\r\n                className=\"option-btn option-btn-1 btn\"\r\n                onClick={() =>\r\n                  this.nextQuestion(\r\n                    this.state.currentQuestion,\r\n                    this.state.currentQuestion.option_1\r\n                  )\r\n                }\r\n              >\r\n                {this.state.currentQuestion.option_1.text}\r\n              </button>\r\n              <button\r\n                className=\"option-btn option-btn-2 btn\"\r\n                onClick={() =>\r\n                  this.nextQuestion(\r\n                    this.state.currentQuestion,\r\n                    this.state.currentQuestion.option_2\r\n                  )\r\n                }\r\n              >\r\n                {this.state.currentQuestion.option_2.text}\r\n              </button>\r\n            </div>\r\n\r\n            {this.state.currentQuestion.option_3 ? (\r\n              <button\r\n                className=\"flip-btn btn\"\r\n                onClick={() =>\r\n                  this.nextQuestion(\r\n                    this.state.currentQuestion,\r\n                    this.state.currentQuestion.option_3\r\n                  )\r\n                }\r\n              >\r\n                Flip a coin\r\n              </button>\r\n            ) : (\r\n              <button className=\"flip-btn btn btn-disabled\" disabled>\r\n                Flip a coin\r\n              </button>\r\n            )}\r\n          </div>\r\n          <Progress percentage={this.getProgress()} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getProgress = () => {\r\n    let curr =\r\n      this.state.questionaire.questions.indexOf(this.state.currentQuestion) + 1;\r\n    let total = this.state.questionaire.questions.length;\r\n\r\n    return (curr / total) * 100;\r\n  };\r\n\r\n  reloadImg = () => {\r\n    return this.state.currentQuestion.img + \"#\" + uuidv1();\r\n  };\r\n  incrementScore = (theories) => {\r\n    let currentScores = this.state.scores;\r\n    theories.map((theory) => {\r\n      currentScores.map((score) => {\r\n        if (score.theory == theory) {\r\n          let newScore = score.score + 1;\r\n          score.score = newScore;\r\n        }\r\n      });\r\n    });\r\n\r\n    this.setState({ scores: currentScores });\r\n  };\r\n  calculateScorePercentage = (score) => {\r\n    let totalscore = this.state.questionaire.questions.length;\r\n    let percentage = (score / totalscore) * 100;\r\n    return percentage;\r\n  };\r\n  generateScores = () => {\r\n    let theories = this.state.questionaire.theories;\r\n    let scores = [];\r\n    theories.map((theory) => {\r\n      let temp = { theory: theory, score: 0 };\r\n      scores.push(temp);\r\n    });\r\n    this.setState({ scores: scores });\r\n  };\r\n  nextQuestion = (question, option) => {\r\n    let curr = this.state.currentQuestionIndex;\r\n    let answers = this.state.answers;\r\n    let answer = {\r\n      question_id: question.question_id,\r\n      answer: option.text,\r\n      theories: option.theories,\r\n    };\r\n    answers.push(answer);\r\n    this.incrementScore(option.theories);\r\n    if (curr < this.state.questionaire.questions.length - 1) {\r\n      curr++;\r\n      this.setState({\r\n        currentQuestionIndex: curr,\r\n        currentQuestion: this.state.questionaire.questions[curr],\r\n        answers: answers,\r\n      });\r\n    } else {\r\n      this.setState({ answers: answers });\r\n      this.props.history.push({\r\n        pathname: \"/summary\",\r\n        state: {\r\n          summary: {\r\n            questionaire_id: this.state.questionaire.id,\r\n            scores: this.state.scores,\r\n            answers: answers,\r\n            numOfQuestions: this.state.questionaire.questions.length,\r\n            theoryData: this.state.theoryData,\r\n            date: new Date(),\r\n          },\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  getTheoryData = (theory) => {\r\n    let theories = this.state.theoryData;\r\n\r\n    for (let i in theories) {\r\n      if (theories[i].theory == theory) {\r\n        return theories[i];\r\n      }\r\n    }\r\n  };\r\n  fetchQuestionaire = () => {\r\n    axios\r\n      .get(\"/getQuestionaire\", {\r\n        params: {\r\n          ID: this.state.id,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n        let questionaire = response.data[0];\r\n        if (questionaire) {\r\n          this.setState({\r\n            isLoading: false,\r\n            questionaire: questionaire,\r\n            currentQuestion: questionaire[\"questions\"][0],\r\n          });\r\n          this.generateScores();\r\n        } else {\r\n          this.setState({\r\n            isLoading: false,\r\n            notFound: true,\r\n            questionaire: { title: \"Not found..\" },\r\n          });\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n}\r\n\r\nexport default Questionaire;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./summary.css\";\r\nimport PlaceholdeNav from \"../nav/nav\";\r\nimport Progress from \"../progress/progress\";\r\nimport { Link } from \"react-router-dom\";\r\nclass Summary extends Component {\r\n  state = {\r\n    highest: {\r\n      iconText: \"\",\r\n      theoryData: { summaryText: \"\", quote: \"\", philosophers: [] },\r\n    },\r\n    summary: {\r\n      answers: [],\r\n      date: \"\",\r\n      icons: [],\r\n      numOfQuestions: 0,\r\n      questionaire_id: \"\",\r\n      scores: [],\r\n    },\r\n  };\r\n\r\n  async componentDidMount() {\r\n    if (this.props.history.location.state) {\r\n      await this.setState({\r\n        summary: this.props.history.location.state.summary,\r\n      });\r\n      this.findHighest();\r\n      this.pushAnswers();\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"summary-wrapper\">\r\n        <div className=\"summary-header\">\r\n          <h3>Your score:</h3>\r\n        </div>\r\n        <div className=\"summary-scores\">\r\n          {this.state.summary.scores.map((score) => {\r\n            let theories = this.state.summary.theoryData;\r\n            for (let index in theories) {\r\n              if (theories[index].theory === score.theory) {\r\n                return (\r\n                  <div className=\"summary-score-box\">\r\n                    <div className=\"summary-icon-container\">\r\n                      <span\r\n                        className=\"theory-icon\"\r\n                        class=\"iconify\"\r\n                        data-icon={theories[index].iconText}\r\n                        data-inline=\"false\"\r\n                      ></span>\r\n                      <p className=\"score-theory-name\">{score.theory}</p>\r\n                    </div>\r\n                    <div className=\"progress-container\">\r\n                      <Progress\r\n                        percentage={this.calculateScorePercentage(score.score)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }\r\n            }\r\n          })}\r\n        </div>\r\n        <div className=\"summary-highest\">\r\n          <div className=\"highest-container\">\r\n            <span\r\n              className=\"theory-icon\"\r\n              class=\"iconify\"\r\n              data-icon={this.state.highest.iconText}\r\n              data-inline=\"false\"\r\n            ></span>\r\n\r\n            <h3 className=\"highest-title\">\r\n              Your morality is most aligned with{\" \"}\r\n              <strong>{this.state.highest.theory}</strong>\r\n            </h3>\r\n            <p className=\"highest-description\">\r\n              {this.state.highest.theoryData.summaryText}\r\n            </p>\r\n            <p className=\"highest-quote\">\r\n              {'\"' + this.state.highest.theoryData.quote + '\"'}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <Link to=\"/\">Home</Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  findHighest = () => {\r\n    let scores = this.state.summary.scores;\r\n    let highest = { score: 0 };\r\n    for (let i in scores) {\r\n      if (scores[i].score > highest.score) {\r\n        highest = scores[i];\r\n        highest.iconText = this.getIcon(highest.theory);\r\n        highest.theoryData = this.getTheoryData(highest.theory);\r\n      }\r\n    }\r\n    this.setState({ highest });\r\n  };\r\n\r\n  getTheoryData = (theory) => {\r\n    let theories = this.state.summary.theoryData;\r\n\r\n    for (let i in theories) {\r\n      if (theories[i].theory == theory) {\r\n        return theories[i];\r\n      }\r\n    }\r\n  };\r\n  getIcon = (theory) => {\r\n    let theories = this.state.summary.theoryData;\r\n\r\n    for (let i in theories) {\r\n      if (theories[i].theory == theory) {\r\n        return theories[i].iconText;\r\n      }\r\n    }\r\n  };\r\n\r\n  calculateScorePercentage = (score) => {\r\n    let totalscore = this.state.summary.numOfQuestions;\r\n    let percentage = (score / totalscore) * 100;\r\n    return percentage;\r\n  };\r\n  pushAnswers = () => {\r\n    axios\r\n      .post(\"/postAnswers\", {\r\n        params: { summary: this.state.summary },\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n      });\r\n  };\r\n}\r\n\r\nexport default Summary;\r\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Homescreen from \"./components/homescreen/homescreen\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { response: [] };\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Press the button to recieve a message from the back-end</h1>\n        <button onClick={() => this.testBackend()}>Click</button>\n        <h3>Message:</h3>\n        <h2>{this.state.response.data}</h2>\n        <Homescreen />\n      </div>\n    );\n  }\n\n  testBackend = (async) => {\n    axios\n      .get(\"/message\")\n      .then((response) => {\n        console.log(response);\n        if (response.status === 200) {\n          this.setState({ response: response });\n        }\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport \"./created.css\";\r\nimport { Link } from \"react-router-dom\";\r\nclass Created extends Component {\r\n  state = { createdgame: { data: { id: \"0000\" } }, link: \"\" };\r\n\r\n  async componentDidMount() {\r\n    if (this.props.history.location.state) {\r\n      await this.setState({ createdgame: this.props.history.location.state });\r\n      this.generateLink();\r\n    }\r\n    this.generateLink();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"created-wrapper\">\r\n        <h3>Success!</h3>\r\n        <p>\r\n          Your game has been created with pin code:{\" \"}\r\n          <strong>{this.state.createdgame.data.id}</strong>\r\n        </p>\r\n        <input type=\"text\" value={this.state.link} disabled></input>\r\n        <Link cn=\"\" to=\"/\">\r\n          Home\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  generateLink = () => {\r\n    let url =\r\n      \"https://moral-agreements.herokuapp.com/#/questionaire/\" +\r\n      this.state.createdgame.data.id;\r\n    this.setState({ link: url });\r\n  };\r\n}\r\n\r\nexport default Created;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Creategame from \"./components/creategame/creategame.jsx\";\nimport Homescreen from \"./components/homescreen/homescreen.jsx\";\nimport Questionaire from \"./components/questionaire/questionaire.jsx\";\nimport Summary from \"./components/summary/summary.jsx\";\nimport App from \"./App\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Created from \"./components/creategame/created/created\";\n\nconst routing = (\n  <HashRouter>\n    <Route exact path=\"/test\" component={App} />\n    <Route exact path=\"/\" component={Homescreen} />\n    <Route path=\"/create\" component={Creategame} />\n    <Route path=\"/summary\" component={Summary} />\n    <Route path=\"/questionaire/:id\" component={Questionaire} />\n    <Route path=\"/created\" component={Created} />\n  </HashRouter>\n);\n\nReactDOM.render(routing, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}