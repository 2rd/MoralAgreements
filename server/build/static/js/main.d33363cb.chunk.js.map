{"version":3,"sources":["logo.svg","creategame/creategame.jsx","nav/nav.jsx","homescreen/inputpin/inputpin.jsx","homescreen/homescreen.jsx","questionaire/loading/loading.jsx","questionaire/questionaire.jsx","summary/summary.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","CreateGame","state","className","type","name","value","Component","PlaceholdeNav","to","InputPin","length","initialValue","onChange","index","style","padding","inputStyle","borderColor","inputFocusStyle","onComplete","props","redir","Homescreen","redirect","history","push","Loading","class","Questionaire","started","isLoading","questionaire","currentQuestionIndex","currentQuestion","scores","answers","reloadImg","img","uuidv1","incrementScore","theories","currentScores","map","theory","score","newScore","setState","decrementScore","generateScores","temp","nextQuestion","question","option","curr","answer","question_id","text","questions","pathname","summary","questionaire_id","id","date","Date","fetchQuestionaire","axios","get","params","ID","then","response","console","log","data","notFound","title","catch","error","this","match","src","onClick","option_1","option_2","option_3","description","Summary","pushAnswers","post","location","App","testBackend","async","status","Boolean","window","hostname","routing","width","height","exact","path","component","Creategame","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d33363cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\n\r\nclass CreateGame extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"creategame-wrapper\">\r\n        <form>\r\n          <label>\r\n            Name:\r\n            <input type=\"text\" name=\"name\" />\r\n          </label>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateGame;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./nav.css\";\r\nclass PlaceholdeNav extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"placeholder-box\">\r\n        <p>This is just a navigation to use while developing</p>\r\n        <div className=\"link-wrapper\">\r\n          <Link to=\"/\">Home</Link>\r\n          <br />\r\n          <Link to=\"/create\">Create Questionaire</Link>\r\n          <br />\r\n          <Link to=\"/summary\">Summary</Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlaceholdeNav;\r\n","import React, { Component } from \"react\";\r\nimport PinInput from \"react-pin-input\";\r\nimport \"./inputpin.css\";\r\nclass InputPin extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"inputpin-wrapper\">\r\n        <h3>Enter game pin</h3>\r\n        <PinInput\r\n          length={4}\r\n          initialValue=\"\"\r\n          onChange={(value, index) => {}}\r\n          type=\"numeric\"\r\n          style={{ padding: \"10px\" }}\r\n          inputStyle={{ borderColor: \"gray\" }}\r\n          inputFocusStyle={{ borderColor: \"red\" }}\r\n          onComplete={(value, index) => this.props.redir(value)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputPin;\r\n","import React, { Component } from \"react\";\r\nimport \"./homescreen.css\";\r\nimport PlaceholderNav from \"../nav/nav\";\r\nimport InputPin from \"./inputpin/inputpin\";\r\n\r\nclass Homescreen extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Homescreen</h1>\r\n        <InputPin redir={(value) => this.redirect(value)} />\r\n        <PlaceholderNav />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  redirect = (value) => {\r\n    this.props.history.push(\"/questionaire/\" + value);\r\n  };\r\n}\r\n\r\nexport default Homescreen;\r\n","import React, { Component } from \"react\";\r\nimport \"./loading.css\";\r\nclass Loading extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"loading-wrapper\">\r\n        <div class=\"lds-roller\">\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n","import React, { Component } from \"react\";\r\nimport Loading from \"./loading/loading\";\r\nimport { v1 as uuidv1 } from \"uuid\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"./questionaire.css\";\r\nclass Questionaire extends Component {\r\n  state = {\r\n    started: false,\r\n    isLoading: true,\r\n    questionaire: {},\r\n    currentQuestionIndex: 0,\r\n    currentQuestion: {},\r\n    scores: [],\r\n    answers: [],\r\n  };\r\n  async componentDidMount() {\r\n    console.log(uuidv1());\r\n    await this.setState({ id: this.props.match.params[\"id\"] });\r\n    this.fetchQuestionaire();\r\n  }\r\n  render() {\r\n    /** Loading while getting questionaire from backend/mongodb */\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <div className=\"questionaire-wrapper\">\r\n          <Loading />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (this.state.notFound) {\r\n      return (\r\n        <div className=\"questionaire-wrapper\">\r\n          <h1>Not found..</h1>\r\n          <Link to=\"/\">Back</Link>\r\n        </div>\r\n      );\r\n    }\r\n    /**If a questionaire of ID from input can't be found */\r\n    return !this.state.started ? (\r\n      <div className=\"questionaire-wrapper\">\r\n        <div>\r\n          <h1>{this.state.questionaire.title}</h1>\r\n          <p>{this.state.questionaire.description}</p>\r\n          <button\r\n            onClick={() => {\r\n              this.setState({ started: true });\r\n            }}\r\n          >\r\n            Start\r\n          </button>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      /**If a questionaire matches ID */\r\n      <div className=\"questionaire-wrapper\">\r\n        <div className=\"section\">\r\n          <h1 className=\"questionaire-title\">\r\n            {this.state.questionaire.title}\r\n          </h1>\r\n          <p className=\"questionaire-id\">id: {this.state.questionaire.id}</p>\r\n        </div>\r\n        <div className=\"question-section section\">\r\n          {this.state.currentQuestion.img ? (\r\n            <img src={this.state.currentQuestion.img} />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <p>{this.state.currentQuestion.text}</p>\r\n        </div>\r\n        <div className=\"button-section section\">\r\n          <p>{this.state.currentQuestion.question}</p>\r\n          <div className=\"button-container\">\r\n            <div className=\"horizontal-buttons\">\r\n              <button\r\n                className=\"option-btn option-btn-1 btn\"\r\n                onClick={() =>\r\n                  this.nextQuestion(\r\n                    this.state.currentQuestion,\r\n                    this.state.currentQuestion.option_1\r\n                  )\r\n                }\r\n              >\r\n                {this.state.currentQuestion.option_1.text}\r\n              </button>\r\n              <button\r\n                className=\"option-btn option-btn-2 btn\"\r\n                onClick={() =>\r\n                  this.nextQuestion(\r\n                    this.state.currentQuestion,\r\n                    this.state.currentQuestion.option_2\r\n                  )\r\n                }\r\n              >\r\n                {this.state.currentQuestion.option_2.text}\r\n              </button>\r\n            </div>\r\n\r\n            {this.state.currentQuestion.option_3 ? (\r\n              <button\r\n                className=\"flip-btn btn\"\r\n                onClick={() =>\r\n                  this.nextQuestion(\r\n                    this.state.currentQuestion,\r\n                    this.state.currentQuestion.option_3\r\n                  )\r\n                }\r\n              >\r\n                flip a coin\r\n              </button>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n\r\n            <Link to=\"/\">Back</Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  reloadImg = () => {\r\n    return this.state.currentQuestion.img + \"#\" + uuidv1();\r\n  };\r\n  incrementScore = (theories) => {\r\n    let currentScores = this.state.scores;\r\n    theories.map((theory) => {\r\n      currentScores.map((score) => {\r\n        if (score.theory == theory) {\r\n          let newScore = score.score + 1;\r\n          score.score = newScore;\r\n        }\r\n      });\r\n    });\r\n\r\n    this.setState({ scores: currentScores });\r\n  };\r\n  decrementScore = () => {};\r\n  generateScores = () => {\r\n    let theories = this.state.questionaire.theories;\r\n    let scores = [];\r\n    theories.map((theory) => {\r\n      let temp = { theory: theory, score: 0 };\r\n      scores.push(temp);\r\n    });\r\n    this.setState({ scores: scores });\r\n  };\r\n  nextQuestion = (question, option) => {\r\n    let curr = this.state.currentQuestionIndex;\r\n    let answers = this.state.answers;\r\n    let answer = {\r\n      question_id: question.question_id,\r\n      answer: option.text,\r\n      theories: option.theories,\r\n    };\r\n    answers.push(answer);\r\n    this.incrementScore(option.theories);\r\n    if (curr < this.state.questionaire.questions.length - 1) {\r\n      curr++;\r\n      this.setState({\r\n        currentQuestionIndex: curr,\r\n        currentQuestion: this.state.questionaire.questions[curr],\r\n        answers: answers,\r\n      });\r\n    } else {\r\n      this.setState({ answers: answers });\r\n      this.props.history.push({\r\n        pathname: \"/summary\",\r\n        state: {\r\n          summary: {\r\n            questionaire_id: this.state.questionaire.id,\r\n            scores: this.state.scores,\r\n            answers: answers,\r\n            date: new Date(),\r\n          },\r\n        },\r\n      });\r\n    }\r\n  };\r\n  fetchQuestionaire = () => {\r\n    axios\r\n      .get(\"/getQuestionaire\", {\r\n        params: {\r\n          ID: this.state.id,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n        let questionaire = response.data[0];\r\n        if (questionaire) {\r\n          this.setState({\r\n            isLoading: false,\r\n            questionaire: questionaire,\r\n            currentQuestion: questionaire[\"questions\"][0],\r\n          });\r\n          this.generateScores();\r\n        } else {\r\n          this.setState({\r\n            isLoading: false,\r\n            notFound: true,\r\n            questionaire: { title: \"Not found..\" },\r\n          });\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n}\r\n\r\nexport default Questionaire;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { PieChart, Pie, Sector, Cell } from \"recharts\";\r\n\r\nimport \"./summary.css\";\r\nimport PlaceholdeNav from \"../nav/nav\";\r\nclass Summary extends Component {\r\n  state = { summary: {} };\r\n\r\n  async componentDidMount() {\r\n    await this.setState({ summary: this.props.history.location.state });\r\n    this.pushAnswers();\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Summary</h1>\r\n        <PlaceholdeNav />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  pushAnswers = () => {\r\n    console.log(this.state.summary);\r\n    axios\r\n      .post(\"/postAnswers\", {\r\n        params: { summary: this.state.summary },\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n      });\r\n  };\r\n}\r\n\r\nexport default Summary;\r\n","import React, { Component } from 'react';\nimport axios from \"axios\";\nimport Homescreen from \"./homescreen/homescreen\"\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state={response:[]}\n  render(){\n    return (\n      <div className=\"App\">\n        <h1>Press the button to recieve a message from the back-end</h1>\n        <button onClick={() => this.testBackend()}>Click</button>\n        <h3>Message:</h3>\n        <h2>{this.state.response.data}</h2>\n        <Homescreen/>\n      </div>\n    );\n  }\n  \n\n   testBackend = async =>{\n    axios.get('/message').then(response=>{\n      console.log(response)\n      if(response.status===200){\n        this.setState({response:response})\n      }\n     \n    }).catch(function (error) {\n      console.log(error);\n    });\n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Creategame from \"./creategame/creategame.jsx\";\nimport Homescreen from \"./homescreen/homescreen.jsx\";\nimport Questionaire from \"./questionaire/questionaire.jsx\";\nimport Summary from \"./summary/summary.jsx\";\nimport App from \"./App\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst routing = (\n  <HashRouter>\n    <div style={{ width: 100 + \"%\", height: 100 + \"%\" }}>\n      <Route exact path=\"/test\" component={App} />\n      <Route exact path=\"/\" component={Homescreen} />\n      <Route path=\"/create\" component={Creategame} />\n      <Route path=\"/summary\" component={Summary} />\n      <Route path=\"/questionaire/:id\" component={Questionaire} />\n    </div>\n  </HashRouter>\n);\n\nReactDOM.render(routing, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}